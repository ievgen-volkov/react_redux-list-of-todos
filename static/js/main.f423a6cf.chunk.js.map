{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","value","initialState","status","query","filterReducer","filters","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","visibleTodos","useMemo","newTodos","completed","title","toLowerCase","includes","className","map","id","onClick","actionsCurrentTodo","changeCurrentTodo","TodoFilter","changeQuery","filterActions","onSubmit","event","preventDefault","onChange","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","isLoading","setIsLoading","useEffect","userId","finally","currentTodoActions","href","email","name","App","todoActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f423a6cf.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype StatusAction = { type: 'filter/Status', payload: Status };\ntype QueryAction = { type: 'filter/Query', payload: string };\ntype Action = StatusAction | QueryAction;\n\nconst status = (value: Status): StatusAction => ({\n  type: 'filter/Status',\n  payload: value,\n});\n\nconst query = (value: string): QueryAction => ({\n  type: 'filter/Query',\n  payload: value,\n});\n\nexport const actions = { status, query };\n\ntype State = {\n  status: Status,\n  query: string,\n};\n\nconst initialState: State = {\n  status: 'all',\n  query: '',\n};\n\nconst filterReducer = (\n  filters: State = initialState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'filter/Status':\n      return {\n        ...filters, status: action.payload,\n      };\n    case 'filter/Query':\n      return {\n        ...filters, query: action.payload,\n      };\n    default:\n      return filters;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype Actions = {\n  type: 'todos/ADD';\n  payload: Todo[];\n};\n\nconst todosAdd = (todos: Todo[]): Actions => ({\n  type: 'todos/ADD',\n  payload: todos,\n});\n\nexport const actions = { todosAdd };\n\nconst todosReducer = (todos: Todo[] = [], action: Actions): Todo[] => {\n  switch (action.type) {\n    case 'todos/ADD':\n      return action.payload;\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useMemo } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions as actionsCurrentTodo } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const status = useAppSelector(state => state.filter.status);\n  const query = useAppSelector(state => state.filter.query);\n\n  const visibleTodos = useMemo(() => {\n    let newTodos = todos.filter(todo => {\n      switch (status) {\n        case 'active':\n          return !todo.completed;\n        case 'completed':\n          return todo.completed;\n        default:\n          return todo;\n      }\n    });\n\n    if (query) {\n      newTodos = newTodos.filter(todo => {\n        return todo.title.toLowerCase().includes(query.toLowerCase());\n      });\n    }\n\n    return newTodos;\n  }, [status, query, todos]);\n\n  const changeCurrentTodo = (todo: Todo) => {\n    dispatch(actionsCurrentTodo.setTodo(todo));\n  };\n\n  if (!visibleTodos) {\n    return (\n      <p className=\"notification is-warning\">\n        There are no todos matching current filter criteria\n      </p>\n    );\n  }\n\n  return (\n    <>\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {visibleTodos.map(todo => (\n            <tr\n              data-cy=\"todo\"\n              key={todo.id}\n              className={todo.id === currentTodo?.id\n                ? 'has-background-info-light'\n                : ''}\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={todo.completed\n                    ? 'has-text-success'\n                    : 'has-text-danger'}\n                >\n                  {todo.title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {todo.id === currentTodo?.id ? (\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                  >\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye-slash\" />\n                    </span>\n                  </button>\n                ) : (\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => changeCurrentTodo(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n                  </button>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Status } from '../../types/Status';\nimport { actions as filterActions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const status = useAppSelector(state => state.filter.status);\n  const query = useAppSelector(state => state.filter.query);\n\n  const changeStatus = (value: Status) => {\n    dispatch(filterActions.status(value));\n  };\n\n  const changeQuery = (value: string) => {\n    dispatch(filterActions.query(value));\n  };\n\n  const clearQuery = () => changeQuery('');\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={(event) => changeStatus(event.target.value as Status)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => changeQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then(setUser)\n        .finally(() => setIsLoading(false));\n    }\n  }, []);\n\n  const closeModal = () => dispatch(currentTodoActions.removeTodo());\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${currentTodo?.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={closeModal}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p\n                className=\"block\"\n                data-cy=\"modal-title\"\n              >\n                {currentTodo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {!currentTodo?.completed ? (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                ) : (\n                  <strong className=\"has-text-success\">Done</strong>\n                )}\n                {' by '}\n                <a href={`mailto:${user?.email}`}>{user?.name}</a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as todoActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then(todos => dispatch(todoActions.todosAdd(todos)))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {\n                isLoading\n                  ? <Loader />\n                  : <TodoList />\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}